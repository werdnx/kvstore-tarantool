---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by werdn.
---
---local log = require('log')
local http = require('http.client').new()
local json = require('json')
local log = require('log')

local SERVER_IP = os.getenv('SERVER_IP')
local okAuth = "Basic  YWRtaW46YWRtaW5wd2Q="

local function request(method, key, body, auth)
    return http:request(
            method, SERVER_IP .. ':8080' .. '/kv/' .. key, body, { headers = { Authorization = auth, ["Content-Type"] = "text/plain", ["Transfer-Encoding"] = 'gzip, deflate' } }
    )
end

local function testFailed(msg)
    log.error('Test failed with msg ' .. msg)
    os.exit()
end

local function checkNoUser()
    resp = request('GET', 'testKey', nil, nil)
    if resp.status ~= 401 then
        testFailed('checkNoUser: expected 401 but recieved ' .. resp.status)
    end
end

local function checkBadUser()
    resp = request('GET', 'testKey', nil, 'Basic aaaa')
    if resp.status ~= 401 then
        testFailed('checkBadUser: expected 401 but recieved ' .. resp.status)
    end
end

local function checkBadPassword()
    resp = request('GET', 'testKey', nil, 'Basic admin:badpassword')
    if resp.status ~= 401 then
        testFailed('checkBadPassword: expected 401 but recieved ' .. resp.status)
    end
end

local function checkOkAuth()
    resp = request('GET', 'testKey', nil, okAuth)
    if resp.status ~= 200 then
        testFailed('checkOkAuth: expected 200 but recieved ' .. resp.status)
    end
end

local function checkNotExistingKeyGet()
    resp = request('GET', 'notExistingKey', nil, okAuth)
    if resp.status ~= 200 then
        testFailed('checkOkAuth: expected 200 but recieved ' .. resp.status)
    end
    if resp.body ~= 'null' then
        testFailed('checkNotExistingGetKey: expected null body recieved ' .. json.encode(resp.body))
    end
end

local function checkPutKey()
    resp = request('PUT', 'test1Key', '{ "c1": "cv1" }', okAuth)
    if resp.status ~= 200 then
        testFailed('checkPutKey: expected 200 but recieved ' .. resp.status)
    end
    if resp.body ~= nil then
        testFailed('checkPutKey: expected empty body recieved ' .. resp.body)
    end
end

local function checNotFound()
    resp = request('PUT', '', nil, okAuth)
    if resp.status ~= 404 then
        testFailed('checkNilKeyPut: expected 400 but recieved ' .. resp.status)
    end
end

local function checkExistingKeyGet()
    resp = request('GET', 'test1Key', nil, okAuth)
    if resp.status ~= 200 then
        testFailed('checkExistingKeyGet: expected 200 but recieved ' .. resp.status)
    end
    jsonBody = json.decode(resp.body)
    if jsonBody['key'] ~= 'test1Key' or jsonBody['value']['c1'] ~= 'cv1' then
        testFailed('checkExistingKeyGet: not expected key or value ' .. resp.body)
    end
end

local function checkNotExistingKeyDelete()
    resp = request('DELETE', 'notExistingKey', nil, okAuth)
    if resp.status ~= 404 then
        testFailed('checkNotExistingKeyDelete: expected 404 but recieved ' .. resp.status)
    end
end

local function checkExistingKeyDelete()
    resp = request('DELETE', 'test1Key', nil, okAuth)
    if resp.status ~= 200 then
        testFailed('checkExistingKeyDelete: expected 200 but recieved ' .. resp.status)
    end
end

local function checkNotExistingKeyPost()
    resp = request('POST', 'notExistingKey', '{ "c1": "cv1" }', okAuth)
    if resp.status ~= 404 then
        testFailed('checkNotExistingKeyPost: expected 404 but recieved ' .. resp.status)
    end
end

local function checkExistingKeyPost()
    resp = request('POST', 'test1Key', '{ "c1": "cv2" }', okAuth)
    if resp.status ~= 200 then
        testFailed('checkExistingKeyPost: expected 200 but recieved ' .. resp.status)
    end
    jsonBody = json.decode(request('GET', 'test1Key', nil, okAuth).body)
    if jsonBody['key'] ~= 'test1Key' or jsonBody['value']['c1'] ~= 'cv2' then
        testFailed('checkExistingKeyPost: not expected key or value ' .. resp.body)
    end
end

local test = {
    doTests = function(self)
        checkNoUser()
        checkBadUser()
        checkBadPassword()
        checkOkAuth()
        checkPutKey()
        checkNotExistingKeyGet()
        checkExistingKeyGet()
        checkNotExistingKeyPost()
        checkExistingKeyPost()
        checNotFound()
        checkNotExistingKeyDelete()
        checkExistingKeyDelete()
        log.info('All test passed')
    end
}
return test
